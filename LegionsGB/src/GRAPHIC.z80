;------------
;	Graphic
;	Vramの処理
;	by yuyat

;----------------------------------------------------------------------------
;マップ定義
;bc = 幅・高さ
;de = 読み込み元アドレス
;hl = 定義先アドレス
;----------------------------------------------------------------------------
g_SetTileMap:
	push	bc	;幅と高さを記憶

.loop:
	ld	a,[de]	;書き込み処理
	inc	de
	ld	[hl+],a
	dec	b
	jr	nz,.loop

	ld	a,c	;幅のリセット
	pop	bc	
	ld	c,a
	push	bc
	
	ld	a,b	;b = 32の時の２重ループ防止
	cp	a,32
	jr	z,.skip
	
	ld	a,l	;32バイト分進める
	sub	a,b	;32 - 横幅
	add	a,32
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a
	
.skip:
	dec	c
	jr	nz,.loop

	pop	bc
	ret

;----------------------------------------------------------------------------
;カードマップ定義
;40~127番を使用
;8x11のサイズで読み込み
;de = 読み込み元アドレス
;hl = 定義先アドレス
;----------------------------------------------------------------------------
g_SetCardMap:
	ld	bc,$080B
.loop:
	ld	a,[de]	;書き込み処理
	inc	de
	add	a,40
	ld	[hl+],a
	dec	b
	jr	nz,.loop

	ld	b,8	;幅のリセット

	ld	a,l	;32バイト分進める
	sub	a,b	;32 - 横幅
	add	a,32
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a

	dec	c
	jr	nz,.loop
	ret

;----------------------------------------------------------------------------
;ミニキャラマップ定義
;40~127番を使用
;8x11のサイズで読み込み
;de = 読み込み元アドレス
;hl = 定義先アドレス
;----------------------------------------------------------------------------
g_SetCharaMap:
	ld	bc,$0404
.loop:
	ld	a,[de]	;書き込み処理
	inc	de
	add	a,128
	ld	[hl+],a
	dec	b
	jr	nz,.loop

	ld	b,4	;幅のリセット

	ld	a,l	;32バイト分進める
	sub	a,b	;32 - 横幅
	add	a,32
	ld	l,a
	ld	a,h
	adc	a,0
	ld	h,a

	dec	c
	jr	nz,.loop
	ret

;----------------------------------------------------------------------------
;BGパレット定義
;d = 色数 * 2
;e = 開始カラー * 2
;hl = 読み込み元アドレス
;----------------------------------------------------------------------------
g_SetBGPallet:
	ld	a,e
	add	a,$80
	ldh	[rBCPS],a
	ld	b,d
.BG:
	ld	a,[hl+]
	ldh	[rBCPD],a
	dec	b
	jr	nz,.BG
	ret

;----------------------------------------------------------------------------
;SPRITEパレット定義
;d = 色数 * 2
;e = 開始カラー * 2
;hl = 読み込み元アドレス
;----------------------------------------------------------------------------
g_SetSPPallet:
	ld	a,e
	add	a,$80
	ldh	[rOCPS],a
	ld	b,d
.SP:
	ld	a,[hl+]
	ldh	[rOCPD],a
	dec	b
	jr	nz,.SP
	ret

;パレット用マクロ
SetPal: MACRO							; #1F0A08 っぽい表記ただし RGB の各値は 31>n>0
	dw	((\1 & $FF)<<10) | ((\1 & $00FF00)>>3) | ((\1 & $FF0000)>>16)
	dw	((\2 & $FF)<<10) | ((\2 & $00FF00)>>3) | ((\2 & $FF0000)>>16)
	dw	((\3 & $FF)<<10) | ((\3 & $00FF00)>>3) | ((\3 & $FF0000)>>16)
	dw	((\4 & $FF)<<10) | ((\4 & $00FF00)>>3) | ((\4 & $FF0000)>>16)
ENDM

ElementPal:
	SetPal	$1F1F1F, $18041B, $0E0210, $000000	;黒属性
	SetPal	$1F1F1F, $1F0404, $120000, $000000	;赤属性
	SetPal	$1F1F1F, $1D1C08, $151101, $000000	;白属性
	SetPal	$1F1F1F, $001C0B, $001307, $000000	;緑属性
	SetPal	$1F1F1F, $14121F, $050C1F, $000000	;青属性
	SetPal	$1F1F1F, $141414, $0E0E0E, $000000	;グレー

CommonPal:
	SetPal	$1F1F1F, $1C1500, $140000, $000000	;システムカラー1(金色風　枠に使う)
	SetPal	$1F1F1F, $1F0000, $00001F, $000000	;システムカラー2(黒赤青　文字に使う)

CommonSPPal:
	SetPal	$1F1F1F, $1F1F1F, $101010, $000000	;システムSPカラー(白灰黒　カーソルに使う)