;------------
;	GBroutine
;	基本的な機能をまとめたもの
;	original source by http://www.geocities.jp/submarine600/

;---------------------------------------------------------------------------
;汎用初期化
;	　　メモリ＆ＶＲＡＭ＆フラグ＆音源＆割り込みのリセット
;	　　スプライトルーチンの常駐化、パレットの初期化
;------------

Initialize:						;初期スタックポインタ = $FFFE
	pop	de

	call	DoubleSpeed
	call	ScreenOff

	xor	a					;GBC 内部 RAM $C000-$CFFF(4KB) クリア
	ld	hl,$C000
	ld	bc,$1000				;スタックポインタをこの領域に配置しないこと。
	call		Mem_Set
	ld	sp,$D000
	push	de

	ld	hl,$FF80
	ld	bc,$7F
	call		Mem_Set				; HI-RAM $FF80-$FFFE クリア

	ld	e,7
.loop1:
	ld	a,e
	ldh	[rSVBK],a
	xor	a
	ld	hl,$D000
	ld	bc,$1000
	call		Mem_Set				;GBC 内部 RAM($D000-$DFFF)クリア（バンク側）#1-7
	dec	e
	jr	nz,.loop1

	ld	a,CART_RAM_ENABLE
	ld	[rRAMG],a

;	ld	a,[$0149]				;カートリッジヘッダの RAM サイズ
;	ld	e,1
;	cp	3
;	jr	c,.loop2				;$02:8KB(1bank) $01:2KB $00:none
;	ld	e,4					;$03:32KB(4bank)
;	jr	z,.loop2
;	ld	e,16
;	dec	a					;$04:128KB(16bank)
;	jr	z,.loop2
;	ld	e,8					;$05:64KB(8bank)
;.loop2:
;	ld	a,e
;	ld	[rRAMB],a
;	xor	a
;	ld	hl,$A000				;カートリッジ側 RAM ($A000-$BFFF)クリア #0-3
;	ld	bc,$2000				;バックアップ SRAM の場合はセーブデータが消えるので注意
;	call		Mem_Set
;	dec	e
;	bit	7,e
;	jr	z,.loop2

	xor	a
	ldh	[rIF],a					;Interrupt request RESET
	ldh	[rIE],a
	ldh	[rSTAT],A				;LCDC status information RESET
	ldh	[rSCX],a				;Scroll X register RESET
	ldh	[rSCY],a				;Scroll Y register RESET

	ld	a,144
	ldh	[rWY],a					;Window Y 非表示
	ld	a,167
	ldh	[rWX],a					;Window X 非表示

	xor	a
	ldh	[rSVBK],a				;GBC 内部 RAM バンク 1 ($D000-$DFFF)
	ldh	[rRP],a					;赤外線ポート
	ldh	[rNR52],a				;音源制御

	ldh	[rVBK],a				;VRAM バンク 0
	ld	hl,$8000				;$8000-$9BFF
	ld	bc,$2000				;TilePattern,TileMap0/1,
	call		Mem_Set				;Attribute.

	ld	a,1
	ldh	[rVBK],a				; VRAMバンク 1
	xor	a
	ld	hl,$8000
	ld	bc,$2000
	call		Mem_Set

	ld	hl,$FE00				; スプライト OAM
	ld	bc,160
	call		Mem_Set

	ld	hl,SpriteRoutine0
	ld	de,SPRITE_ROUTINE0
	ld	bc,SpriteRoutineEnd0 - SpriteRoutine0
	call		LDIR

	ld	hl,SpriteRoutine1
	ld	de,SPRITE_ROUTINE1
	ld	bc,SpriteRoutineEnd1 - SpriteRoutine1
	call		LDIR

	xor	a
	ldh	[rVBK],a
	ret

;汎用初期化はここまで

;---------------------------------------------------------------------------
;汎用FILL転送    [hl+]<-A  BC times
;------------
Mem_Set:
	dec			bc
	inc			b
	inc			c
.loop:
	ld			[hl+],a
	dec			c
	jr			nz,.loop
	dec			b
	jr			nz,.loop
	ret


;---------------------------------------------------------------------------
;汎用LDIR転送    [DE]<-[hl] BC times
;------------
LDIR:
	dec			bc
	inc			b
	inc			c
.loop:
	ld			a,[hl+]
	ld			[de],a
	inc			de
	dec			c
	jr			nz,.loop
	dec			b
	jr			nz,.loop
	ret

;---------------------------------------------------------------------------
;汎用LDDR転送    [DE]<-[hl] BC times
;------------

LDDR:									;[hl]->[de] for bc times.
	dec			bc
	inc			b
	inc			c

.loop:
	ld			a,[hl-]
	ld			[de],a
	dec			de
	dec			c
	jr			nz,.loop
	dec			b
	jr			nz,.loop
	ret

;---------------------------------------------------------------------------
DoubleSpeed:
	ldh			a,[rIE]
	push		af
	xor			a
	ldh			[rIE],a
	ldh			[rIF],a
	ld			a,$30
	ldh			[rP1],a
	ld			a,1
	ldh			[rKEY1],a
	stop
	pop			af
	ldh			[rIE],a
	ret


;---------------------------------------------------------------------------
;  Sprite DMA Transfer
;  HRAMに転送しておき、vsync毎に呼び出し。
;  (スプライトDMA中はHRAM以外アクセス不可のため）
;---------------------------------------------------------------------------
;
;  Transfer Time = 160us(single speed mode)/80us(double speed mode) 672clk 以上であればよい
;
;  OAM_BUFFER ds $A0
;  アドレスの上位バイトをDMAに指定するため、配置に注意。
; 8+12+ (4+12)*37 +4+8 +12+8+12 +16
SpriteRoutine0:
	ld			a,OAM_BUFFER0 / 256		;8
	ldh			[rDMA],a				;12
	ld			a,$28					;8
.Wait:
	dec			a						;(4+12)*36+4+8
	jr			nz,.Wait
	ret
SpriteRoutineEnd0:

SpriteRoutine1:
	ld			a,OAM_BUFFER1 / 256		;8
	ldh			[rDMA],a				;12
	ld			a,$28					;8
.Wait:
	dec			a						;(4+12)*36+4+8
	jr			nz,.Wait
	ret
SpriteRoutineEnd1:

;---------------------------------------------------------------------------
;　16進数2桁→10進数5桁
;  HLに10進化したい数を入れて呼び出し
;  af hl de
;---------------------------------------------------------------------------
bin2dec:
	ld			de,-10000
	xor			a
.b2d10k:
	add			hl,de
	inc			a
	jr			c,.b2d10k
	dec			a
	ld			de,10000
	add			hl,de
	ld			[_Decimal],a

	ld			de,-1000
	xor			a
.b2d1k:
	add			hl,de
	inc			a
	jr			c,.b2d1k
	dec			a
	ld			de,1000
	add			hl,de
	ld			[_Decimal + 1],a

	ld			de,-100
	xor			a
.b2d100:
	add			hl,de
	inc			a
	jr			c,.b2d100
	dec			a
	ld			de,100
	add			hl,de
	ld			[_Decimal + 2],a

	ld			de,-10
	xor			a
.b2d10:
	add			hl,de
	inc			a
	jr			c,.b2d10
	dec			a
	ld			de,10
	add			hl,de
	ld			[_Decimal + 3],a

	ld			a,l
	ld			[_Decimal + 4],a
	ret

;---------------------------------------------------------------------------
; 8bit 乱数シード初期化
;---------------------------------------------------------------------------
InitRand8:
	push		af
	ldh			a,[rDIV]
	ld			[_Seed],a
	pop		af
	ret


;---------------------------------------------------------------------------
; 8bit 乱数生成
;---------------------------------------------------------------------------
Rand8:
	push		bc
	ld			a,[_Seed]
	ld			b,a
	add			a,a
	add			a,a
	add			a,b
	inc			a
	ld			[_Seed],a
	pop			bc
	ret
;---------------------------------------------------------------------------
;液晶オン
;---------------------------------------------------------------------------
ScreenOnVB:
	ld	a, %11100011	; LCD Controller = On 		1=ON / 0=OFF
				; Window/TileMap = 0x9C00	1=9C00-9FFF / 0=9800-9BFF
				; Window Visible = On		1=Visible / 0=Invisible
				; BG Chr 	 = 0x8800	1=8000-8FFF / 0=8800-97FF
				; BG Bank	 = 0x9C00	1=9C00-9FFF / 0=9800-9BFF
				; OBJ		 = 8x8		1=16*8 / 0=8*8
				; OBJ		 = On		1=Visible / 0=Invisible
				; BG		 = On
	ldh	[rLCDC],a	;LCD Controller

.scron:
	ldh	a,[rLY]
	cp	144
	jr	C,.scron

	xor	a
	ldh	[rIF],a		;IFのリセット

	ld	a,IEF_VBLANK | IEF_LCDC
	ldh	[rIE], a


	ret


;---------------------------------------------------------------------------
; Turn Screen off	LCDC駆動中なら停止させる。
;---------------------------------------------------------------------------
ScreenOff:
	ldh	a,[rLCDC]	;LCDC bit7
	rla
	ret	nc		;既に停止していたらret

.loop:
	ldh  	a,[rLY]
	cp   	$90		; vblank待ち
	jr   	c,.loop

	ldh	a,[rLCDC]
	and	%01111111
	ldh   	[rLCDC], a	;LCDC Off
	ret


;ボタン入力処理
;register: a/b
; workram: _Pad
;          _PadDebounce
ReadButton:
	ld	a,P1F_5
	ld	[rP1],a			;出力端子P15のみHighに設定する

	ld	a,[rP1]			;delay
	ld	a,[rP1]
	cpl				;Highがオフなので反転する
	and	$0f			;下位4bitを抽出
	swap	a			;上位4bitに移動させる
	ld	b,a

	ld	a,P1F_4
	ld	[rP1],a			;出力端子P14のみHighに設定する

	ld	a,[rP1]			;delay
	ld	a,[rP1]
	ld	a,[rP1]
	ld	a,[rP1]
	ld	a,[rP1]
	cpl				;Highがオフなので反転する
	and	$0f			;下位4bitを抽出
	or	b			;入力を合成する

	;a = old, b = new
	ld	b,a
	ld	a,[_Pad]		;前フレームのボタン状態を代入
	xor	b
	and	b
	ld	[_PadDebounce],a	;押された瞬間のみオンにする
	ld	a,b
	ld	[_Pad],a		;押している間オンにする

	ld	a,P1F_5|P1F_4
	ld	[rP1],a			;処理終了時、出力端子をリセットする
	ret

;old  new  result new result
;1 xor 1     0 and 1    0
;1     0     1     0    0
;0     1     1     1    1
;0     0     0     0    0

;押されたボタンと値の対応表

;ボタン種類	値
;下	 	0x80U
;上	 	0x40U
;左	 	0x20U
;右	 	0x10U
;START		0x08U
;SELECT		0x04U
;B		0x02U
;A		0x01U